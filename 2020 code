/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


public class Robot extends TimedRobot {
  private static final String kDefaultAuto = "Default";
  private static final String kCustomAuto = "My Auto";
  private String m_autoSelected;
  private final SendableChooser<String> m_chooser = new SendableChooser<>();

  // Driver Joystick
  private Joystick driver = new Joystick(0);
  private Joystick operator = new Joystick(1);  

  private Spark leftDrive1 = new Spark(1);  //Left Front
  private Spark leftDrive2 = new Spark(3);  //Left Back
  private Spark rightDrive1 = new Spark(0); //right Front
  private Spark rightDrive2 = new Spark(2); //right Back

  private Spark intake = new Spark(5);

  private Spark arm = new Spark (4); 

  private Spark climb = new Spark (6);

  private SpeedControllerGroup m_left = new SpeedControllerGroup(leftDrive1, leftDrive2);
  private SpeedControllerGroup m_right = new SpeedControllerGroup(rightDrive1, rightDrive2);

  private DifferentialDrive m_drive = new DifferentialDrive(m_right, m_left);
  
  private Timer timer = new Timer();

  @Override
  public void robotInit() {
    m_chooser.setDefaultOption("Default Au //to", kDefaultAuto);
    m_chooser.addOption("My Auto", kCustomAuto);
    SmartDashboard.putData("Auto choices", m_chooser);
    
    //Camera
    UsbCamera camera1Camera = CameraServer.getInstance().startAutomaticCapture(0);
    UsbCamera camera2CUsbCamera = CameraServer.getInstance().startAutomaticCapture(1);
    camera1Camera.setResolution(640, 480);
    camera2CUsbCamera.setResolution(160, 120);
  }


  @Override
  public void robotPeriodic() {
  }

  //AUTONOMOUS CODE
  @Override
  public void autonomousInit() {
    m_autoSelected = m_chooser.getSelected();
    // m_autoSelected = SmartDashboard.getString("Auto Selector", kDefaultAuto);

    timer.start();
    System.out.println("Auto selected: " + m_autoSelected);
  
  }

  /**
   * This function is called periodically during autonomous.
   */
  @Override
  public void autonomousPeriodic() {
    switch (m_autoSelected) {
      case kCustomAuto:
        // Put custom auto code here
        break;
      case kDefaultAuto:
          // m_drive.tankDrive(-0.5, -0.5);
          // if (timer.hasPeriodPassed(9)){  //&&! timer.hasPeriodPassed(10)
          //   arm.set(0.5);
          // }
          // else if (timer.hasPeriodPassed(10)) {
          //   intake.set(-1);
          // }

           m_drive.tankDrive(0.6, 0.5);
          if (timer.hasPeriodPassed(10)) {
            // arm.set(0.5);                                ARM AND INTAKE WERE COMMENTED OUT
            // intake.set(-1);
          }
      default:
      
        
        break;
    }
  }

  // TELEOP CODE
  @Override
  public void teleopPeriodic() {
    
    //tank drive
      
  double left = driver.getRawAxis(1);
  double right = driver.getRawAxis(5);

  m_drive.tankDrive(right, left);

  // Code for Intake. Operator is the intake arm and climb person
  // if button 1 is pressed
  if (this.operator.getRawButton(1)) {          
    //set intake to 100% speed (-1 to 1 for 100% backwards to 100% speed forwards)
    this.intake.set(1);
  } else if (this.operator.getRawButton(2)) { 
    this.intake.set(-1);
  } else {
    this.intake.set(0);
  }
    // Code for Arm
    // if button 11 is pressed
    if (this.operator.getRawButton(11)) {
      //set arm to 100% speed (-1 to 1 for 100% backwards to 100% speed forwards)
      this.arm.set(0.5);
    } else if (this.operator.getRawButton(12)) { 
      this.arm.set(-0.5);
    } else {
      this.arm.set(0);
    }

    // Code for Climb
    // if button 9 is pressed
    if (this.operator.getRawButton(6)) {
      //set climb to 100% speed (-1 to 1 for 100% backwards to 100% speed forwards)
      this.climb.set(1);
    } else if (this.operator.getRawButton(9)) { 
      this.climb.set(-1);
    } else {
      this.climb.set(0);
    }

  }

  @Override
  public void testPeriodic() {
  }
}
